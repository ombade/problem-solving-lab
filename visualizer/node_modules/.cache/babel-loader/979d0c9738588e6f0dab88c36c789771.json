{"ast":null,"code":"import { sprintf } from 'sprintf-js';\nimport { Tracer } from 'core/tracers';\nimport { LogRenderer } from 'core/renderers';\nclass LogTracer extends Tracer {\n  getRendererClass() {\n    return LogRenderer;\n  }\n  set(log = '') {\n    this.log = log;\n    super.set();\n  }\n  print(message) {\n    this.log += message;\n    this.speak(message); // Add text-to-speech here\n  }\n  println(message) {\n    this.print(message + '\\n');\n  }\n  printf(format, ...args) {\n    this.print(sprintf(format, ...args));\n  }\n\n  // Silent log method (no text-to-speech)\n  silentPrint(message) {\n    this.log += message;\n  }\n  silentPrintln(message) {\n    this.silentPrint(message + '\\n');\n  }\n\n  // Text-to-speech function\n  speak(text) {\n    if ('speechSynthesis' in window) {\n      this.stopSpeaking(); // Stop any ongoing speech before starting new one\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    } else {\n      console.error('Text-to-Speech is not supported in this browser.');\n    }\n  }\n\n  // Stop any ongoing speech\n  stopSpeaking() {\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n    }\n  }\n}\nexport default LogTracer;","map":{"version":3,"names":["sprintf","Tracer","LogRenderer","LogTracer","getRendererClass","set","log","print","message","speak","println","printf","format","args","silentPrint","silentPrintln","text","window","stopSpeaking","utterance","SpeechSynthesisUtterance","lang","speechSynthesis","console","error","cancel"],"sources":["/home/om-bade/Downloads/AlgoLab-main/visualizer/src/core/tracers/LogTracer.js"],"sourcesContent":["import { sprintf } from 'sprintf-js';\nimport { Tracer } from 'core/tracers';\nimport { LogRenderer } from 'core/renderers';\n\nclass LogTracer extends Tracer {\n  getRendererClass() {\n    return LogRenderer;\n  }\n\n  set(log = '') {\n    this.log = log;\n    super.set();\n  }\n\n  print(message) {\n    this.log += message;\n    this.speak(message); // Add text-to-speech here\n  }\n\n  println(message) {\n    this.print(message + '\\n');\n  }\n\n  printf(format, ...args) {\n    this.print(sprintf(format, ...args));\n  }\n\n  // Silent log method (no text-to-speech)\n  silentPrint(message) {\n    this.log += message;\n  }\n\n  silentPrintln(message) {\n    this.silentPrint(message + '\\n');\n  }\n\n  // Text-to-speech function\n  speak(text) {\n    if ('speechSynthesis' in window) {\n      this.stopSpeaking(); // Stop any ongoing speech before starting new one\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'en-US';\n      speechSynthesis.speak(utterance);\n    } else {\n      console.error('Text-to-Speech is not supported in this browser.');\n    }\n  }\n\n  // Stop any ongoing speech\n  stopSpeaking() {\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n    }\n  }\n}\n\nexport default LogTracer;\n\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,MAAMC,SAAS,SAASF,MAAM,CAAC;EAC7BG,gBAAgBA,CAAA,EAAG;IACjB,OAAOF,WAAW;EACpB;EAEAG,GAAGA,CAACC,GAAG,GAAG,EAAE,EAAE;IACZ,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,KAAK,CAACD,GAAG,CAAC,CAAC;EACb;EAEAE,KAAKA,CAACC,OAAO,EAAE;IACb,IAAI,CAACF,GAAG,IAAIE,OAAO;IACnB,IAAI,CAACC,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC;EACvB;EAEAE,OAAOA,CAACF,OAAO,EAAE;IACf,IAAI,CAACD,KAAK,CAACC,OAAO,GAAG,IAAI,CAAC;EAC5B;EAEAG,MAAMA,CAACC,MAAM,EAAE,GAAGC,IAAI,EAAE;IACtB,IAAI,CAACN,KAAK,CAACP,OAAO,CAACY,MAAM,EAAE,GAAGC,IAAI,CAAC,CAAC;EACtC;;EAEA;EACAC,WAAWA,CAACN,OAAO,EAAE;IACnB,IAAI,CAACF,GAAG,IAAIE,OAAO;EACrB;EAEAO,aAAaA,CAACP,OAAO,EAAE;IACrB,IAAI,CAACM,WAAW,CAACN,OAAO,GAAG,IAAI,CAAC;EAClC;;EAEA;EACAC,KAAKA,CAACO,IAAI,EAAE;IACV,IAAI,iBAAiB,IAAIC,MAAM,EAAE;MAC/B,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC;MACrB,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACJ,IAAI,CAAC;MACpDG,SAAS,CAACE,IAAI,GAAG,OAAO;MACxBC,eAAe,CAACb,KAAK,CAACU,SAAS,CAAC;IAClC,CAAC,MAAM;MACLI,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;IACnE;EACF;;EAEA;EACAN,YAAYA,CAAA,EAAG;IACb,IAAI,iBAAiB,IAAID,MAAM,EAAE;MAC/BK,eAAe,CAACG,MAAM,CAAC,CAAC;IAC1B;EACF;AACF;AAEA,eAAetB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}