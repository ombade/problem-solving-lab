{"ast":null,"code":"import{Tracer}from'core/tracers';import{distance}from'common/util';import{GraphRenderer}from'core/renderers';class GraphTracer extends Tracer{getRendererClass(){return GraphRenderer;}init(){super.init();this.dimensions={baseWidth:320,baseHeight:320,padding:32,nodeRadius:12,arrowGap:4,nodeWeightGap:4,edgeWeightGap:4};this.isDirected=true;this.isWeighted=false;this.callLayout={method:this.layoutCircle,args:[]};this.logTracer=null;}set(){let array2d=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];this.nodes=[];this.edges=[];for(let i=0;i<array2d.length;i++){this.addNode(i);for(let j=0;j<array2d.length;j++){const value=array2d[i][j];if(value){this.addEdge(i,j,this.isWeighted?value:null);}}}this.layout();super.set();}directed(){let isDirected=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.isDirected=isDirected;}weighted(){let isWeighted=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.isWeighted=isWeighted;}addNode(id){let weight=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let x=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let y=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;let visitedCount=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;let selectedCount=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;if(this.findNode(id))return;this.nodes.push({id,weight,x,y,visitedCount,selectedCount});this.layout();}updateNode(id,weight,x,y,visitedCount,selectedCount){const node=this.findNode(id);const update={weight,x,y,visitedCount,selectedCount};Object.keys(update).forEach(key=>{if(update[key]===undefined)delete update[key];});Object.assign(node,update);}removeNode(id){const node=this.findNode(id);if(!node)return;const index=this.nodes.indexOf(node);this.nodes.splice(index,1);this.layout();}addEdge(source,target){let weight=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let visitedCount=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;let selectedCount=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;if(this.findEdge(source,target))return;this.edges.push({source,target,weight,visitedCount,selectedCount});this.layout();}updateEdge(source,target,weight,visitedCount,selectedCount){const edge=this.findEdge(source,target);const update={weight,visitedCount,selectedCount};Object.keys(update).forEach(key=>{if(update[key]===undefined)delete update[key];});Object.assign(edge,update);}removeEdge(source,target){const edge=this.findEdge(source,target);if(!edge)return;const index=this.edges.indexOf(edge);this.edges.splice(index,1);this.layout();}findNode(id){return this.nodes.find(node=>node.id===id);}findEdge(source,target){let isDirected=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.isDirected;if(isDirected){return this.edges.find(edge=>edge.source===source&&edge.target===target);}else{return this.edges.find(edge=>edge.source===source&&edge.target===target||edge.source===target&&edge.target===source);}}findLinkedEdges(source){let isDirected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.isDirected;if(isDirected){return this.edges.filter(edge=>edge.source===source);}else{return this.edges.filter(edge=>edge.source===source||edge.target===source);}}findLinkedNodeIds(source){let isDirected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.isDirected;const edges=this.findLinkedEdges(source,isDirected);return edges.map(edge=>edge.source===source?edge.target:edge.source);}findLinkedNodes(source){let isDirected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.isDirected;const ids=this.findLinkedNodeIds(source,isDirected);return ids.map(id=>this.findNode(id));}getRect(){const{baseWidth,baseHeight,padding}=this.dimensions;const left=-baseWidth/2+padding;const top=-baseHeight/2+padding;const right=baseWidth/2-padding;const bottom=baseHeight/2-padding;const width=right-left;const height=bottom-top;return{left,top,right,bottom,width,height};}layout(){const{method,args}=this.callLayout;method.apply(this,args);}layoutCircle(){this.callLayout={method:this.layoutCircle,args:arguments};const rect=this.getRect();const unitAngle=2*Math.PI/this.nodes.length;let angle=-Math.PI/2;for(const node of this.nodes){const x=Math.cos(angle)*rect.width/2;const y=Math.sin(angle)*rect.height/2;node.x=x;node.y=y;angle+=unitAngle;}}layoutTree(){let root=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let sorted=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.callLayout={method:this.layoutTree,args:arguments};const rect=this.getRect();if(this.nodes.length===1){const[node]=this.nodes;node.x=(rect.left+rect.right)/2;node.y=(rect.top+rect.bottom)/2;return;}let maxDepth=0;const leafCounts={};let marked={};const recursiveAnalyze=(id,depth)=>{marked[id]=true;leafCounts[id]=0;if(maxDepth<depth)maxDepth=depth;const linkedNodeIds=this.findLinkedNodeIds(id,false);for(const linkedNodeId of linkedNodeIds){if(marked[linkedNodeId])continue;leafCounts[id]+=recursiveAnalyze(linkedNodeId,depth+1);}if(leafCounts[id]===0)leafCounts[id]=1;return leafCounts[id];};recursiveAnalyze(root,0);const hGap=rect.width/leafCounts[root];const vGap=rect.height/maxDepth;marked={};const recursivePosition=(node,h,v)=>{marked[node.id]=true;node.x=rect.left+(h+leafCounts[node.id]/2)*hGap;node.y=rect.top+v*vGap;const linkedNodes=this.findLinkedNodes(node.id,false);if(sorted)linkedNodes.sort((a,b)=>a.id-b.id);for(const linkedNode of linkedNodes){if(marked[linkedNode.id])continue;recursivePosition(linkedNode,h,v+1);h+=leafCounts[linkedNode.id];}};const rootNode=this.findNode(root);recursivePosition(rootNode,0,0);}layoutRandom(){this.callLayout={method:this.layoutRandom,args:arguments};const rect=this.getRect();const placedNodes=[];for(const node of this.nodes){do{node.x=rect.left+Math.random()*rect.width;node.y=rect.top+Math.random()*rect.height;}while(placedNodes.find(placedNode=>distance(node,placedNode)<48));placedNodes.push(node);}}visit(target,source,weight){this.visitOrLeave(true,target,source,weight);}leave(target,source,weight){this.visitOrLeave(false,target,source,weight);}visitOrLeave(visit,target){let source=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let weight=arguments.length>3?arguments[3]:undefined;const edge=this.findEdge(source,target);if(edge)edge.visitedCount+=visit?1:-1;const node=this.findNode(target);if(weight!==undefined)node.weight=weight;node.visitedCount+=visit?1:-1;if(this.logTracer){this.logTracer.println(visit?(source||'')+' -> '+target:(source||'')+' <- '+target);}}select(target,source){this.selectOrDeselect(true,target,source);}deselect(target,source){this.selectOrDeselect(false,target,source);}selectOrDeselect(select,target){let source=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const edge=this.findEdge(source,target);if(edge)edge.selectedCount+=select?1:-1;const node=this.findNode(target);node.selectedCount+=select?1:-1;if(this.logTracer){this.logTracer.println(select?(source||'')+' => '+target:(source||'')+' <= '+target);}}log(key){this.logTracer=key?this.getObject(key):null;}}export default GraphTracer;","map":{"version":3,"names":["Tracer","distance","GraphRenderer","GraphTracer","getRendererClass","init","dimensions","baseWidth","baseHeight","padding","nodeRadius","arrowGap","nodeWeightGap","edgeWeightGap","isDirected","isWeighted","callLayout","method","layoutCircle","args","logTracer","set","array2d","arguments","length","undefined","nodes","edges","i","addNode","j","value","addEdge","layout","directed","weighted","id","weight","x","y","visitedCount","selectedCount","findNode","push","updateNode","node","update","Object","keys","forEach","key","assign","removeNode","index","indexOf","splice","source","target","findEdge","updateEdge","edge","removeEdge","find","findLinkedEdges","filter","findLinkedNodeIds","map","findLinkedNodes","ids","getRect","left","top","right","bottom","width","height","apply","rect","unitAngle","Math","PI","angle","cos","sin","layoutTree","root","sorted","maxDepth","leafCounts","marked","recursiveAnalyze","depth","linkedNodeIds","linkedNodeId","hGap","vGap","recursivePosition","h","v","linkedNodes","sort","a","b","linkedNode","rootNode","layoutRandom","placedNodes","random","placedNode","visit","visitOrLeave","leave","println","select","selectOrDeselect","deselect","log","getObject"],"sources":["/home/om-bade/Downloads/AlgoLab-main/visualizer/src/core/tracers/GraphTracer.js"],"sourcesContent":["import { Tracer } from 'core/tracers';\nimport { distance } from 'common/util';\nimport { GraphRenderer } from 'core/renderers';\n\nclass GraphTracer extends Tracer {\n  getRendererClass() {\n    return GraphRenderer;\n  }\n\n  init() {\n    super.init();\n    this.dimensions = {\n      baseWidth: 320,\n      baseHeight: 320,\n      padding: 32,\n      nodeRadius: 12,\n      arrowGap: 4,\n      nodeWeightGap: 4,\n      edgeWeightGap: 4,\n    };\n    this.isDirected = true;\n    this.isWeighted = false;\n    this.callLayout = { method: this.layoutCircle, args: [] };\n    this.logTracer = null;\n  }\n\n  set(array2d = []) {\n    this.nodes = [];\n    this.edges = [];\n    for (let i = 0; i < array2d.length; i++) {\n      this.addNode(i);\n      for (let j = 0; j < array2d.length; j++) {\n        const value = array2d[i][j];\n        if (value) {\n          this.addEdge(i, j, this.isWeighted ? value : null);\n        }\n      }\n    }\n    this.layout();\n    super.set();\n  }\n\n  directed(isDirected = true) {\n    this.isDirected = isDirected;\n  }\n\n  weighted(isWeighted = true) {\n    this.isWeighted = isWeighted;\n  }\n\n  addNode(id, weight = null, x = 0, y = 0, visitedCount = 0, selectedCount = 0) {\n    if (this.findNode(id)) return;\n    this.nodes.push({ id, weight, x, y, visitedCount, selectedCount });\n    this.layout();\n  }\n\n  updateNode(id, weight, x, y, visitedCount, selectedCount) {\n    const node = this.findNode(id);\n    const update = { weight, x, y, visitedCount, selectedCount };\n    Object.keys(update).forEach(key => {\n      if (update[key] === undefined) delete update[key];\n    });\n    Object.assign(node, update);\n  }\n\n  removeNode(id) {\n    const node = this.findNode(id);\n    if (!node) return;\n    const index = this.nodes.indexOf(node);\n    this.nodes.splice(index, 1);\n    this.layout();\n  }\n\n  addEdge(source, target, weight = null, visitedCount = 0, selectedCount = 0) {\n    if (this.findEdge(source, target)) return;\n    this.edges.push({ source, target, weight, visitedCount, selectedCount });\n    this.layout();\n  }\n\n  updateEdge(source, target, weight, visitedCount, selectedCount) {\n    const edge = this.findEdge(source, target);\n    const update = { weight, visitedCount, selectedCount };\n    Object.keys(update).forEach(key => {\n      if (update[key] === undefined) delete update[key];\n    });\n    Object.assign(edge, update);\n  }\n\n  removeEdge(source, target) {\n    const edge = this.findEdge(source, target);\n    if (!edge) return;\n    const index = this.edges.indexOf(edge);\n    this.edges.splice(index, 1);\n    this.layout();\n  }\n\n  findNode(id) {\n    return this.nodes.find(node => node.id === id);\n  }\n\n  findEdge(source, target, isDirected = this.isDirected) {\n    if (isDirected) {\n      return this.edges.find(edge => edge.source === source && edge.target === target);\n    } else {\n      return this.edges.find(edge =>\n        (edge.source === source && edge.target === target) ||\n        (edge.source === target && edge.target === source));\n    }\n  }\n\n  findLinkedEdges(source, isDirected = this.isDirected) {\n    if (isDirected) {\n      return this.edges.filter(edge => edge.source === source);\n    } else {\n      return this.edges.filter(edge => edge.source === source || edge.target === source);\n    }\n  }\n\n  findLinkedNodeIds(source, isDirected = this.isDirected) {\n    const edges = this.findLinkedEdges(source, isDirected);\n    return edges.map(edge => edge.source === source ? edge.target : edge.source);\n  }\n\n  findLinkedNodes(source, isDirected = this.isDirected) {\n    const ids = this.findLinkedNodeIds(source, isDirected);\n    return ids.map(id => this.findNode(id));\n  }\n\n  getRect() {\n    const { baseWidth, baseHeight, padding } = this.dimensions;\n    const left = -baseWidth / 2 + padding;\n    const top = -baseHeight / 2 + padding;\n    const right = baseWidth / 2 - padding;\n    const bottom = baseHeight / 2 - padding;\n    const width = right - left;\n    const height = bottom - top;\n    return { left, top, right, bottom, width, height };\n  }\n\n  layout() {\n    const { method, args } = this.callLayout;\n    method.apply(this, args);\n  }\n\n  layoutCircle() {\n    this.callLayout = { method: this.layoutCircle, args: arguments };\n    const rect = this.getRect();\n    const unitAngle = 2 * Math.PI / this.nodes.length;\n    let angle = -Math.PI / 2;\n    for (const node of this.nodes) {\n      const x = Math.cos(angle) * rect.width / 2;\n      const y = Math.sin(angle) * rect.height / 2;\n      node.x = x;\n      node.y = y;\n      angle += unitAngle;\n    }\n  }\n\n  layoutTree(root = 0, sorted = false) {\n    this.callLayout = { method: this.layoutTree, args: arguments };\n    const rect = this.getRect();\n\n    if (this.nodes.length === 1) {\n      const [node] = this.nodes;\n      node.x = (rect.left + rect.right) / 2;\n      node.y = (rect.top + rect.bottom) / 2;\n      return;\n    }\n\n    let maxDepth = 0;\n    const leafCounts = {};\n    let marked = {};\n    const recursiveAnalyze = (id, depth) => {\n      marked[id] = true;\n      leafCounts[id] = 0;\n      if (maxDepth < depth) maxDepth = depth;\n      const linkedNodeIds = this.findLinkedNodeIds(id, false);\n      for (const linkedNodeId of linkedNodeIds) {\n        if (marked[linkedNodeId]) continue;\n        leafCounts[id] += recursiveAnalyze(linkedNodeId, depth + 1);\n      }\n      if (leafCounts[id] === 0) leafCounts[id] = 1;\n      return leafCounts[id];\n    };\n    recursiveAnalyze(root, 0);\n\n    const hGap = rect.width / leafCounts[root];\n    const vGap = rect.height / maxDepth;\n    marked = {};\n    const recursivePosition = (node, h, v) => {\n      marked[node.id] = true;\n      node.x = rect.left + (h + leafCounts[node.id] / 2) * hGap;\n      node.y = rect.top + v * vGap;\n      const linkedNodes = this.findLinkedNodes(node.id, false);\n      if (sorted) linkedNodes.sort((a, b) => a.id - b.id);\n      for (const linkedNode of linkedNodes) {\n        if (marked[linkedNode.id]) continue;\n        recursivePosition(linkedNode, h, v + 1);\n        h += leafCounts[linkedNode.id];\n      }\n    };\n    const rootNode = this.findNode(root);\n    recursivePosition(rootNode, 0, 0);\n  }\n\n  layoutRandom() {\n    this.callLayout = { method: this.layoutRandom, args: arguments };\n    const rect = this.getRect();\n    const placedNodes = [];\n    for (const node of this.nodes) {\n      do {\n        node.x = rect.left + Math.random() * rect.width;\n        node.y = rect.top + Math.random() * rect.height;\n      } while (placedNodes.find(placedNode => distance(node, placedNode) < 48));\n      placedNodes.push(node);\n    }\n  }\n\n  visit(target, source, weight) {\n    this.visitOrLeave(true, target, source, weight);\n  }\n\n  leave(target, source, weight) {\n    this.visitOrLeave(false, target, source, weight);\n  }\n\n  visitOrLeave(visit, target, source = null, weight) {\n    const edge = this.findEdge(source, target);\n    if (edge) edge.visitedCount += visit ? 1 : -1;\n    const node = this.findNode(target);\n    if (weight !== undefined) node.weight = weight;\n    node.visitedCount += visit ? 1 : -1;\n    if (this.logTracer) {\n      this.logTracer.println(visit ? (source || '') + ' -> ' + target : (source || '') + ' <- ' + target);\n    }\n  }\n\n  select(target, source) {\n    this.selectOrDeselect(true, target, source);\n  }\n\n  deselect(target, source) {\n    this.selectOrDeselect(false, target, source);\n  }\n\n  selectOrDeselect(select, target, source = null) {\n    const edge = this.findEdge(source, target);\n    if (edge) edge.selectedCount += select ? 1 : -1;\n    const node = this.findNode(target);\n    node.selectedCount += select ? 1 : -1;\n    if (this.logTracer) {\n      this.logTracer.println(select ? (source || '') + ' => ' + target : (source || '') + ' <= ' + target);\n    }\n  }\n\n  log(key) {\n    this.logTracer = key ? this.getObject(key) : null;\n  }\n}\n\nexport default GraphTracer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}