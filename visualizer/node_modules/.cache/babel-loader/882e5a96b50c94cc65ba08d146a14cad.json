{"ast":null,"code":"import Promise from 'bluebird';\nimport axios from 'axios';\naxios.interceptors.response.use(response => response.data);\nconst request = (url, process) => {\n  const tokens = url.split('/');\n  const baseURL = /^https?:\\/\\//i.test(url) ? '' : '/api';\n  return (...args) => {\n    const mappedURL = baseURL + tokens.map((token, i) => token.startsWith(':') ? args.shift() : token).join('/');\n    return Promise.resolve(process(mappedURL, args));\n  };\n};\nconst GET = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [params, cancelToken] = args;\n    return axios.get(mappedURL, {\n      params,\n      cancelToken\n    });\n  });\n};\nconst DELETE = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [params, cancelToken] = args;\n    return axios.delete(mappedURL, {\n      params,\n      cancelToken\n    });\n  });\n};\nconst POST = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [body, params, cancelToken] = args;\n    return axios.post(mappedURL, body, {\n      params,\n      cancelToken\n    });\n  });\n};\nconst PUT = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [body, params, cancelToken] = args;\n    return axios.put(mappedURL, body, {\n      params,\n      cancelToken\n    });\n  });\n};\nconst PATCH = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [body, params, cancelToken] = args;\n    return axios.patch(mappedURL, body, {\n      params,\n      cancelToken\n    });\n  });\n};\nconst AlgorithmApi = {\n  getCategories: GET('/algorithms'),\n  getAlgorithm: GET('/algorithms/:categoryKey/:algorithmKey')\n};\nconst VisualizationApi = {\n  getVisualization: GET('/visualizations/:visualizationId')\n};\nconst GitHubApi = {\n  auth: token => Promise.resolve(axios.defaults.headers.common['Authorization'] = token && `token ${token}`),\n  getUser: GET('https://api.github.com/user'),\n  listGists: GET('https://api.github.com/gists'),\n  createGist: POST('https://api.github.com/gists'),\n  editGist: PATCH('https://api.github.com/gists/:id'),\n  getGist: GET('https://api.github.com/gists/:id'),\n  deleteGist: DELETE('https://api.github.com/gists/:id'),\n  forkGist: POST('https://api.github.com/gists/:id/forks')\n};\nconst TracerApi = {\n  md: ({\n    code\n  }) => Promise.resolve([{\n    key: 'markdown',\n    method: 'MarkdownTracer',\n    args: ['Markdown']\n  }, {\n    key: 'markdown',\n    method: 'set',\n    args: [code]\n  }, {\n    key: null,\n    method: 'setRoot',\n    args: ['markdown']\n  }]),\n  json: ({\n    code\n  }) => new Promise(resolve => resolve(JSON.parse(code))),\n  js: ({\n    code\n  }, params, cancelToken) => new Promise((resolve, reject) => {\n    const worker = new Worker('/api/tracers/js/worker');\n    if (cancelToken) {\n      cancelToken.promise.then(cancel => {\n        worker.terminate();\n        reject(cancel);\n      });\n    }\n    worker.onmessage = e => {\n      worker.terminate();\n      resolve(e.data);\n    };\n    worker.onerror = error => {\n      worker.terminate();\n      reject(error);\n    };\n    worker.postMessage(code);\n  }),\n  cpp: POST('/tracers/cpp'),\n  java: POST('/tracers/java')\n};\nexport { AlgorithmApi, VisualizationApi, GitHubApi, TracerApi };","map":{"version":3,"names":["Promise","axios","interceptors","response","use","data","request","url","process","tokens","split","baseURL","test","args","mappedURL","map","token","i","startsWith","shift","join","resolve","GET","URL","params","cancelToken","get","DELETE","delete","POST","body","post","PUT","put","PATCH","patch","AlgorithmApi","getCategories","getAlgorithm","VisualizationApi","getVisualization","GitHubApi","auth","defaults","headers","common","getUser","listGists","createGist","editGist","getGist","deleteGist","forkGist","TracerApi","md","code","key","method","json","JSON","parse","js","reject","worker","Worker","promise","then","cancel","terminate","onmessage","e","onerror","error","postMessage","cpp","java"],"sources":["/home/om-bade/Downloads/AlgoLab-main/visualizer/src/apis/index.js"],"sourcesContent":["import Promise from 'bluebird';\nimport axios from 'axios';\n\naxios.interceptors.response.use(response => response.data);\n\nconst request = (url, process) => {\n  const tokens = url.split('/');\n  const baseURL = /^https?:\\/\\//i.test(url) ? '' : '/api';\n  return (...args) => {\n    const mappedURL = baseURL + tokens.map((token, i) => token.startsWith(':') ? args.shift() : token).join('/');\n    return Promise.resolve(process(mappedURL, args));\n  };\n};\n\nconst GET = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [params, cancelToken] = args;\n    return axios.get(mappedURL, { params, cancelToken });\n  });\n};\n\nconst DELETE = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [params, cancelToken] = args;\n    return axios.delete(mappedURL, { params, cancelToken });\n  });\n};\n\nconst POST = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [body, params, cancelToken] = args;\n    return axios.post(mappedURL, body, { params, cancelToken });\n  });\n};\n\nconst PUT = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [body, params, cancelToken] = args;\n    return axios.put(mappedURL, body, { params, cancelToken });\n  });\n};\n\nconst PATCH = URL => {\n  return request(URL, (mappedURL, args) => {\n    const [body, params, cancelToken] = args;\n    return axios.patch(mappedURL, body, { params, cancelToken });\n  });\n};\n\nconst AlgorithmApi = {\n  getCategories: GET('/algorithms'),\n  getAlgorithm: GET('/algorithms/:categoryKey/:algorithmKey'),\n};\n\nconst VisualizationApi = {\n  getVisualization: GET('/visualizations/:visualizationId'),\n};\n\nconst GitHubApi = {\n  auth: token => Promise.resolve(axios.defaults.headers.common['Authorization'] = token && `token ${token}`),\n  getUser: GET('https://api.github.com/user'),\n  listGists: GET('https://api.github.com/gists'),\n  createGist: POST('https://api.github.com/gists'),\n  editGist: PATCH('https://api.github.com/gists/:id'),\n  getGist: GET('https://api.github.com/gists/:id'),\n  deleteGist: DELETE('https://api.github.com/gists/:id'),\n  forkGist: POST('https://api.github.com/gists/:id/forks'),\n};\n\nconst TracerApi = {\n  md: ({ code }) => Promise.resolve([{\n    key: 'markdown',\n    method: 'MarkdownTracer',\n    args: ['Markdown'],\n  }, {\n    key: 'markdown',\n    method: 'set',\n    args: [code],\n  }, {\n    key: null,\n    method: 'setRoot',\n    args: ['markdown'],\n  }]),\n  json: ({ code }) => new Promise(resolve => resolve(JSON.parse(code))),\n  js: ({ code }, params, cancelToken) => new Promise((resolve, reject) => {\n    const worker = new Worker('/api/tracers/js/worker');\n    if (cancelToken) {\n      cancelToken.promise.then(cancel => {\n        worker.terminate();\n        reject(cancel);\n      });\n    }\n    worker.onmessage = e => {\n      worker.terminate();\n      resolve(e.data);\n    };\n    worker.onerror = error => {\n      worker.terminate();\n      reject(error);\n    };\n    worker.postMessage(code);\n  }),\n  cpp: POST('/tracers/cpp'),\n  java: POST('/tracers/java'),\n};\n\nexport {\n  AlgorithmApi,\n  VisualizationApi,\n  GitHubApi,\n  TracerApi,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}